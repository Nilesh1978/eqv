{
    "collab_server" : "",
    "contents" : "#' Timeline of earthquakes\n#'\n#' @description This geom plots a timeline of earthquakes in one line with\n#' options to group by country, color by number of casualties and size by scale\n#'\n#' @inheritParams ggplot2::geom_point\n#'\n#' @details The function plots a timeline of earthquakes based on cleaned NOAA\n#' data. It requires \\code{x} aesthetics. An optional \\code{y} aesthetics can\n#' be used to group data by a selected variable (for example country).\n#' @export\n#'\n#' @importFrom ggplot2 layer\n#'\n#' @examples\n#' \\dontrun{\n#' data %>% eq_clean_data() %>%\n#'    filter(COUNTRY %in% c(\"GREECE\", \"ITALY\"), YEAR > 2000) %>%\n#'    ggplot(aes(x = DATE,\n#'               y = COUNTRY,\n#'               color = as.numeric(TOTAL_DEATHS),\n#'               size = as.numeric(EQ_PRIMARY)\n#'    )) +\n#'    geom_timeline() +\n#'    theme_timeline() +\n#'    labs(size = \"Richter scale value\", color = \"# deaths\")\n#' }\ngeom_timeline <- function(mapping = NULL, data = NULL, stat = \"identity\",\n                          position = \"identity\", na.rm = FALSE,\n                          show.legend = NA, inherit.aes = TRUE, ...) {\n\n  ggplot2::layer(\n    geom = GeomTimeline, mapping = mapping,\n    data = data, stat = stat, position = position,\n    show.legend = show.legend, inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}\n\n#' @importFrom ggplot2 aes draw_key_point\n#' @importFrom grid pointsGrob linesGrob gList gpar\n#' @importFrom scales alpha\nGeomTimeline <-\n  ggplot2::ggproto(\n    \"GeomTimeline\", ggplot2::Geom,\n    required_aes = c(\"x\"),\n    default_aes = ggplot2::aes(colour = \"grey\", size = 1.5, alpha = 0.5,\n                               shape = 21, fill = \"grey\", stroke = 0.5),\n    draw_key = ggplot2::draw_key_point,\n    draw_panel = function(data, panel_scales, coord) {\n\n      if (!(\"y\" %in% colnames(data))) {\n        data$y <- 0.15\n      }\n\n      coords <- coord$transform(data, panel_scales)\n\n      points <- grid::pointsGrob(\n        coords$x, coords$y,\n        pch = coords$shape, size = unit(coords$size / 4, \"char\"),\n        gp = grid::gpar(\n          col = scales::alpha(coords$colour, coords$alpha),\n          fill = scales::alpha(coords$colour, coords$alpha)\n        )\n      )\n      y_lines <- unique(coords$y)\n\n      lines <- grid::polylineGrob(\n        x = unit(rep(c(0, 1), each = length(y_lines)), \"npc\"),\n        y = unit(c(y_lines, y_lines), \"npc\"),\n        id = rep(seq_along(y_lines), 2),\n        gp = grid::gpar(col = \"grey\",\n                        lwd = .pt)\n      )\n\n      grid::gList(points, lines)\n    }\n  )\n\n#' Timeline labels of earthquakes\n#'\n#' @description This geom plots timeline labels of earthquakes. It assumes that\n#' \\code{geom_timeline} was used to create the timelines\n#'\n#' @inheritParams ggplot2::geom_text\n\n#' @param n_max An integer. If used, it only plots the labels for the\n#' \\code{n_max} largest earthquakes in the selected group in the timeline\n#'\n#' @details The function plots timeline labels of earthquakes based on cleaned\n#' NOAA data. It should be used with combination with \\code{geom_timeline}. The\n#' required aesthetics for this geom is \\code{label} that should contain\n#' string for labeling each data point.\n#'\n#' @export\n#'\n#' @importFrom ggplot2 layer\n#'\n#' @examples\n#' \\dontrun{\n#' data %>% eq_clean_data() %>%\n#'    filter(COUNTRY %in% c(\"GREECE\", \"ITALY\"), YEAR > 2000) %>%\n#'    ggplot(aes(x = DATE,\n#'               y = COUNTRY,\n#'               color = as.numeric(TOTAL_DEATHS),\n#'               size = as.numeric(EQ_PRIMARY)\n#'    )) +\n#'    geom_timeline() +\n#'    geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) +\n#'    theme_timeline() +\n#'    labs(size = \"Richter scale value\", color = \"# deaths\")\n#' }\ngeom_timeline_label <- function(mapping = NULL, data = NULL, stat = \"identity\",\n                                position = \"identity\", ..., na.rm = FALSE,\n                                n_max = NULL, show.legend = NA,\n                                inherit.aes = TRUE) {\n\n  ggplot2::layer(\n    geom = GeomTimelineLabel, mapping = mapping,\n    data = data, stat = stat, position = position,\n    show.legend = show.legend, inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, n_max = n_max, ...)\n  )\n}\n\n#' @importFrom ggplot2 draw_key_blank\n#' @importFrom dplyr %>% group_by top_n ungroup\n#' @importFrom grid gpar linesGrob textGrob gList\nGeomTimelineLabel <-\n  ggplot2::ggproto(\n    \"GeomTimelineLabel\", ggplot2::Geom,\n    required_aes = c(\"x\", \"label\"),\n    draw_key = ggplot2::draw_key_blank,\n    setup_data = function(data, params) {\n      if (!is.null(params$n_max)) {\n        if (!(\"size\" %in% colnames(data))) {\n          stop(paste(\"'size' aesthetics needs to be\",\n                     \"provided when 'n_max' is defined.\"))\n        }\n        data <- data %>%\n          dplyr::group_by_(\"group\") %>%\n          dplyr::top_n(params$n_max, size) %>%\n          dplyr::ungroup()\n      }\n      data\n    },\n    draw_panel = function(data, panel_scales, coord, n_max) {\n\n      if (!(\"y\" %in% colnames(data))) {\n        data$y <- 0.15\n      }\n\n      coords <- coord$transform(data, panel_scales)\n      n_grp <- length(unique(data$group))\n      offset <- 0.2 / n_grp\n\n      lines <- grid::polylineGrob(\n        x = unit(c(coords$x, coords$x), \"npc\"),\n        y = unit(c(coords$y, coords$y + offset), \"npc\"),\n        id = rep(1:dim(coords)[1], 2),\n        gp = grid::gpar(\n          col = \"grey\"\n        )\n      )\n\n      names <- grid::textGrob(\n        label = coords$label,\n        x = unit(coords$x, \"npc\"),\n        y = unit(coords$y + offset, \"npc\"),\n        just = c(\"left\", \"bottom\"),\n        rot = 45\n      )\n\n      grid::gList(lines, names)\n    }\n  )\n\n#' Theme for better timeline visualization in ggplot2\n#'\n#' @description  This is a simple theme that makes \\code{\\link{geom_timeline}}\n#' look better.\n#'\n#' @examples\n#' \\dontrun{\n#' data %>% eq_clean_data() %>%\n#' filter(COUNTRY %in% c(\"GREECE\", \"ITALY\"), YEAR > 2000) %>%\n#'    ggplot(aes(x = DATE,\n#'               y = COUNTRY,\n#'               color = as.numeric(TOTAL_DEATHS),\n#'               size = as.numeric(EQ_PRIMARY)\n#'    )) +\n#'    geom_timeline() +\n#'    theme_timeline()\n#' }\n#'\n#' @importFrom ggplot2 theme element_blank element_line\n#'\n#' @export\n#'\ntheme_timeline <- function() {\n  ggplot2::theme(\n    plot.background = ggplot2::element_blank(),\n    panel.background = ggplot2::element_blank(),\n    legend.key = ggplot2::element_blank(),\n    axis.title.y = ggplot2::element_blank(),\n    axis.line.x = ggplot2::element_line(size = 1),\n    axis.ticks.y = ggplot2::element_blank(),\n    legend.position = \"bottom\"\n  )\n}\n",
    "created" : 1520690860643.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2377498085",
    "id" : "2BD8E5D0",
    "lastKnownWriteTime" : 1520797221,
    "last_content_update" : -2147483648,
    "path" : "C:/Users/nndigh/Desktop/Educational/coursera/Mastering Software Development in R/CAPSTONE/package/eqv/R/geom.R",
    "project_path" : "R/geom.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}