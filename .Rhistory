devtools::load_all(".")
library(eqv)
devtools::document()
load_all()
library(eqv)
devtools::document()
library(ggplot2)
devtools::document()
load_all()
# load packages
library(devtools)
library(roxygen2)
devtools::document()
library(eqv)
devtools::document()
load_all()
library(eqv)
devtools::document()
library(eqv)
devtools::document()
load_all()
library(eqv)
devtools::document()
load_all()
library(eqv)
devtools::document()
load_all()
library(eqv)
devtools::document()
load_all()
library(eqv)
# load packages
library(devtools)
library(roxygen2)
devtools::document()
load_all()
library(eqv)
# load packages
library(devtools)
library(roxygen2)
devtools::document()
load_all()
library(chron)
?julian
devtools::document()
load_all()
library(eqv)
devtools::check()
devtools::document()
load_all()
devtools::check()
library(eqv)
?aes
devtools::document()
load_all()
library(eqv)
knitr::opts_chunk$set(echo = TRUE)
filename <- system.file("extdata/signif.txt", package = "earthquakeVis")
data <- readr::read_delim(filename, delim = "\t")
filename
filename <- system.file("extdata/signif.txt", package = "eqv")
filename
data %>% eq_clean_data() %>%
filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot(aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline() +
geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) +
theme_timeline() +
labs(size = "Richter scale value", color = "# deaths") +
scale_x_date(limits = c(lubridate::ymd("2000-01-01"),
lubridate::ymd("2020-01-01")))
library(dplyr)
data <- readr::read_delim(filename, delim = "\t")
data %>% eq_clean_data() %>%
filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot(aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline() +
geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) +
theme_timeline() +
labs(size = "Richter scale value", color = "# deaths") +
scale_x_date(limits = c(lubridate::ymd("2000-01-01"),
lubridate::ymd("2020-01-01")))
geom_timeline <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTimeline, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
GeomTimeline <-
ggplot2::ggproto(
"GeomTimeline", ggplot2::Geom,
required_aes = c("x"),
default_aes = ggplot2::aes(colour = "grey", size = 1.5, alpha = 0.5,
shape = 21, fill = "grey", stroke = 0.5),
draw_key = ggplot2::draw_key_point,
draw_panel = function(data, panel_scales, coord) {
if (!("y" %in% colnames(data))) {
data$y <- 0.15
}
coords <- coord$transform(data, panel_scales)
points <- grid::pointsGrob(
coords$x, coords$y,
pch = coords$shape, size = unit(coords$size / 4, "char"),
gp = grid::gpar(
col = scales::alpha(coords$colour, coords$alpha),
fill = scales::alpha(coords$colour, coords$alpha)
)
)
y_lines <- unique(coords$y)
lines <- grid::polylineGrob(
x = unit(rep(c(0, 1), each = length(y_lines)), "npc"),
y = unit(c(y_lines, y_lines), "npc"),
id = rep(seq_along(y_lines), 2),
gp = grid::gpar(col = "grey",
lwd = .pt)
)
grid::gList(points, lines)
}
)
geom_timeline_label <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", ..., na.rm = FALSE,
n_max = NULL, show.legend = NA,
inherit.aes = TRUE) {
ggplot2::layer(
geom = GeomTimelineLabel, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, n_max = n_max, ...)
)
}
GeomTimelineLabel <-
ggplot2::ggproto(
"GeomTimelineLabel", ggplot2::Geom,
required_aes = c("x", "label"),
draw_key = ggplot2::draw_key_blank,
setup_data = function(data, params) {
if (!is.null(params$n_max)) {
if (!("size" %in% colnames(data))) {
stop(paste("'size' aesthetics needs to be",
"provided when 'n_max' is defined."))
}
data <- data %>%
dplyr::group_by_("group") %>%
dplyr::top_n(params$n_max, size) %>%
dplyr::ungroup()
}
data
},
draw_panel = function(data, panel_scales, coord, n_max) {
if (!("y" %in% colnames(data))) {
data$y <- 0.15
}
coords <- coord$transform(data, panel_scales)
n_grp <- length(unique(data$group))
offset <- 0.2 / n_grp
lines <- grid::polylineGrob(
x = unit(c(coords$x, coords$x), "npc"),
y = unit(c(coords$y, coords$y + offset), "npc"),
id = rep(1:dim(coords)[1], 2),
gp = grid::gpar(
col = "grey"
)
)
names <- grid::textGrob(
label = coords$label,
x = unit(coords$x, "npc"),
y = unit(coords$y + offset, "npc"),
just = c("left", "bottom"),
rot = 45
)
grid::gList(lines, names)
}
)
theme_timeline <- function() {
ggplot2::theme(
plot.background = ggplot2::element_blank(),
panel.background = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
axis.line.x = ggplot2::element_line(size = 1),
axis.ticks.y = ggplot2::element_blank(),
legend.position = "bottom"
)
}
eq_clean_data<- function(dataset){
# create DATE column by combining year, month, & day cols
dataset2<- dataset %>%
dplyr::mutate(MONTH = ifelse(is.na(MONTH), 1, MONTH),
DAY = ifelse(is.na(DAY), 1, DAY),
julian_days = julian(MONTH, DAY, YEAR),
DATE = as.Date(julian_days, origin = "1970-01-01"),
LATITUDE = as.numeric(LATITUDE),
LONGITUDE = as.numeric(LONGITUDE)) %>%
dplyr::select(I_D, FLAG_TSUNAMI, DATE, everything()) %>%
dplyr::select(-julian_days)
}
eq_location_clean<- function(dataset){
# clean up location names
dataset2<- dataset %>%
dplyr::mutate(LOCATION_NAME = gsub("^.*:\\s*", "",LOCATION_NAME),
LOCATION_NAME = stringr::str_to_title(LOCATION_NAME))
}
data %>% eq_clean_data() %>%
filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot(aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline() +
geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) +
theme_timeline() +
labs(size = "Richter scale value", color = "# deaths") +
scale_x_date(limits = c(lubridate::ymd("2000-01-01"),
lubridate::ymd("2020-01-01")))
data %>%
eq_clean_data() %>%
eq_location_clean %>%
filter(COUNTRY %in% c("INDIA", "ITALY"), YEAR > 1990) %>%
ggplot(aes(x  = DATE, y = COUNTRY,color = as.numeric(TOTAL_DEATHS),size = as.numeric(EQ_PRIMARY))) + geom_timeline() + geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) + theme_timeline()
dataset2<- dataset %>%
dplyr::mutate(MONTH = ifelse(is.na(MONTH), 1, MONTH),
DAY = ifelse(is.na(DAY), 1, DAY),
julian_days = chron::julian(MONTH, DAY, YEAR),
DATE = as.Date(julian_days, origin = "1970-01-01"),
LATITUDE = as.numeric(LATITUDE),
LONGITUDE = as.numeric(LONGITUDE)) %>%
dplyr::select(I_D, FLAG_TSUNAMI, DATE, everything()) %>%
dplyr::select(-julian_days)
eq_clean_data<- function(dataset){
# create DATE column by combining year, month, & day cols
dataset2<- dataset %>%
dplyr::mutate(MONTH = ifelse(is.na(MONTH), 1, MONTH),
DAY = ifelse(is.na(DAY), 1, DAY),
julian_days = chron::julian(MONTH, DAY, YEAR),
DATE = as.Date(julian_days, origin = "1970-01-01"),
LATITUDE = as.numeric(LATITUDE),
LONGITUDE = as.numeric(LONGITUDE)) %>%
dplyr::select(I_D, FLAG_TSUNAMI, DATE, everything()) %>%
dplyr::select(-julian_days)
}
data %>%
eq_clean_data() %>%
eq_location_clean %>%
filter(COUNTRY %in% c("INDIA", "ITALY"), YEAR > 1990) %>%
ggplot(aes(x  = DATE, y = COUNTRY,color = as.numeric(TOTAL_DEATHS),size = as.numeric(EQ_PRIMARY))) + geom_timeline() + geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) + theme_timeline()
source('C:/Users/nndigh/Desktop/Educational/coursera/Mastering Software Development in R/CAPSTONE/package/eqv/R/data_cleanup.R')
data %>%
eq_clean_data()
data %>%
eq_clean_data() %>%
eq_location_clean
data <- readr::read_delim(filename, delim = "\t")
data %>%
eq_clean_data() %>%
eq_location_clean %>%
filter(COUNTRY %in% c("INDIA", "ITALY"), YEAR > 1990) %>%
ggplot(aes(x  = DATE, y = COUNTRY,color = as.numeric(TOTAL_DEATHS),size = as.numeric(EQ_PRIMARY)))+ geom_timeline() + geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) + theme_timeline()
library(ggplot2)
data %>%
eq_clean_data() %>%
eq_location_clean %>%
filter(COUNTRY %in% c("INDIA", "ITALY"), YEAR > 1990) %>%
ggplot(aes(x  = DATE, y = COUNTRY,color = as.numeric(TOTAL_DEATHS),size = as.numeric(EQ_PRIMARY)))+ geom_timeline() + geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) + theme_timeline()
filename <- system.file("extdata/signif.txt", package = "eqv")
data <- readr::read_delim(filename, delim = "\t")
data %>%
eq_clean_data() %>%
eq_location_clean %>%
filter(COUNTRY %in% c("INDIA", "ITALY"), YEAR > 1990) %>%
ggplot(aes(x  = DATE, y = COUNTRY,color = as.numeric(TOTAL_DEATHS),size = as.numeric(EQ_PRIMARY)))+ geom_timeline() + geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) + theme_timeline()
library(leaflet)
data %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_map <- function(data, annot_col) {
m <- leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(lng = data$LONGITUDE, lat = data$LATITUDE,
radius = data$EQ_PRIMARY, weight = 1,
popup = data[[annot_col]])
m
}
eq_create_label <- function(data) {
popup_text <- with(data, {
part1 <- ifelse(is.na(LOCATION_NAME), "",
paste("<strong>Location:</strong>",
LOCATION_NAME))
part2 <- ifelse(is.na(EQ_PRIMARY), "",
paste("<br><strong>Magnitude</strong>",
EQ_PRIMARY))
part3 <- ifelse(is.na(TOTAL_DEATHS), "",
paste("<br><strong>Total deaths:</strong>",
TOTAL_DEATHS))
paste0(part1, part2, part3)
})
}
data %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
filename <- system.file("extdata/signif.txt", package = "eqv")
data <- readr::read_delim(filename, delim = "\t")
data %>%
eq_clean_data() %>%
eq_location_clean %>%
filter(COUNTRY %in% c("INDIA", "ITALY"), YEAR > 1990) %>%
ggplot(aes(x  = DATE, y = COUNTRY,color = as.numeric(TOTAL_DEATHS),size = as.numeric(EQ_PRIMARY)))+ geom_timeline() + geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) + theme_timeline()
data %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
library(readr)
library(dplyr)
library(chron)
library(stringr)
library(ggplot2)
library(leaflet)
source("./R source code/eq_clean_data.R")
